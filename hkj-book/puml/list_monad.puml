@startuml list_monad
!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml

hide empty members


interface "Kind<F, A>" as Kind
interface "Functor<F>" as Functor
interface "Applicative<F>" as Applicative
interface "Monad<M>" as MonadBase

interface "ListKind<A>" as ListKindBase << (L,orchid) >> {
  ' Witness type for List
}

class "ListKindHelper" as ListKindHelper << (H,grey) >> {
}
note right of ListKindHelper
  Contains internal 'ListHolder<A> record'
  which implements ListKind<A>.
  `record ListHolder<A>(List<A> list) implements ListKind<A> {}`
end note

class "ListFunctor" as ListFunctorImpl {
}
class "ListMonad" as ListMonadImpl {
}

MonadBase --|> Applicative
Applicative --|> Functor
Functor --|> Kind : (logically, Kind is the base for HKTs)

ListKindBase --|> Kind : <ListKind<Witness, A>

ListFunctorImpl ..|> Functor : <ListKind.Witness>
ListMonadImpl --|> ListFunctorImpl
ListMonadImpl ..|> MonadBase : <ListKind.Witness>

ListMonadImpl ..> ListKindHelper : uses for widen / narrow
ListFunctorImpl ..> ListKindHelper : uses for widen / narrow


@enduml