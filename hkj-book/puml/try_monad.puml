@startuml try_monad

!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml

hide empty members


interface "Try<T>" as Try


interface "TryKind<T>" extends "Kind<TryKind.Witness, T>" as TryKind

class TryFunctor implements Functor<TryKind<?>> {
  + Kind<TryKind.Witness, B> map(Function<A, B> f, Kind<TryKind.Witness, A> fa)
}
class TryApplicative extends TryFunctor implements Applicative<TryKind<?>> {
  + Kind<TryKind.Witness, A> of(A value)
  + Kind<TryKind.Witness, B> ap(Kind<TryKind.Witness, Function<A, B>> ff, Kind<TryKind.Witness, A> fa)
}
class TryMonad extends TryApplicative implements Monad<TryKind<?>> {
  + Kind<TryKind.Witness, B> flatMap(Function<A, Kind<TryKind.Witness, B>> f, Kind<TryKind.Witness, A> ma)
}
class TryMonadError extends TryMonad implements MonadError<TryKind<?>, Throwable> {
  + Kind<TryKind.Witness, A> raiseError(Throwable error)
  + Kind<TryKind.Witness, A> handleErrorWith(Kind<TryKind.Witness, A> ma, Function<Throwable, Kind<TryKind.Witness, A>> handler)
}

TryKind -- Kind : extends

TryMonadError ..> TryKind : operates on <TryKind<?>>
TryMonadError ..> Try : uses methods of

@enduml