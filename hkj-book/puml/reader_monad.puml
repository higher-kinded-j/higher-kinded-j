@startuml reader_monad

!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml


hide empty members

interface Kind<F, A>
interface Functor<F>
interface Applicative<F>
interface Monad<F>


interface Reader<R, A> <<Functional Interface>> {
   + A run(R r)
   + {static} Reader<R, A> of(Function<R, A> func)
   + {static} Reader<R, A> constant(A value)
   + {static} Reader<R, R> ask()
   + Reader<R, B> map(Function<A, B> f)
   + Reader<R, B> flatMap(Function<A, Reader<R, B>> f)
}



class ReaderKindHelper {
  + {static} Reader<R, A> unwrap(Kind<ReaderKind.Witness<R>, A> kind)
  + {static} ReaderKind<R, A> wrap(Reader<R, A> reader)
  + {static} ReaderKind<R, A> reader(Function<R, A> runFunction)
  + {static} ReaderKind<R, A> constant(A value)
  + {static} ReaderKind<R, R> ask()
  + {static} A runReader(Kind<ReaderKind.Witness<R>, A> kind, R environment)
}

class ReaderFunctor<R> implements Functor<ReaderKind.Witness<R>> {
   + Kind<ReaderKind.Witness<R>, B> map(Function<A, B> f, Kind<ReaderKind.Witness<R>, A> fa)
}
class ReaderApplicative<R> extends ReaderFunctor<R> implements Applicative<ReaderKind.Witness<R>> {
   + Kind<ReaderKind.Witness<R>, A> of(A value)
   + Kind<ReaderKind.Witness<R>, B> ap(Kind<ReaderKind.Witness<R>, Function<A, B>> ff, Kind<ReaderKind.Witness<R>, A> fa)
}
class ReaderMonad<R> extends ReaderApplicative<R> implements Monad<ReaderKind.Witness<R>> {
   + Kind<ReaderKind.Witness<R>, B> flatMap(Function<A, Kind<ReaderKind.Witness<R>, B>> f, Kind<ReaderKind.Witness<R>, A> ma)
}


' Relationships
"ReaderKind<R,A>" --> Kind : extends <ReaderKind.Witness<R>, A>

ReaderKindHelper ..> Reader : creates/unwraps
ReaderKindHelper ..> "ReaderKind<R,A>" : creates/unwraps

ReaderMonad ..> "ReaderKind<R,A>" : operates on <ReaderKind<R,?>>
ReaderMonad ..> Reader : uses methods of

@enduml