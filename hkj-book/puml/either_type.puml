@startuml either_type
!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml

hide empty members
interface "Kind<F_WITNESS, A>" as Kind




  interface "Either<L, R>" as EitherInterface extends EitherKind<L,R> {
    + {static} Left<L,R> left(L value)
    + {static} Right<L,R> right(R value)
    + boolean isLeft()
    + boolean isRight()
    + L getLeft() throws NoSuchElementException
    + R getRight() throws NoSuchElementException
    + <U> U fold(Function<L,U> leftMapper, Function<R,U> rightMapper)
    + <RR> Either<L,RR> map(Function<R,RR> mapper)
    + <RR> Either<L,RR> flatMap(Function<R, Either<L,RR>> mapper)
  }

  package "internal implementations" {
    class "Left<L, R>" as LeftRecord <<record>> implements Either<L,R> {
    + Left(L value)
     }
    class "Right<L, R>" as RightRecord <<record>>  implements Either<L,R> {
    + Right(R value)
         }
  }
  Either <|-- LeftRecord
  Either <|-- RightRecord


  class EitherKindHelper {
    + {static} widen(either: Either<L,R>): Kind<EitherKind.Witness<L>, R>
    + {static} narrow(kind: Kind<EitherKind.Witness<L>, R>): Either<L,R>
    + {static} left(monad: MonadError<F,L>, error: L): Kind<F,R> ' This is more for EitherT.left
    + {static} right(monad: Monad<F>, value: R): Kind<F,R>      ' This is more for EitherT.right
  }


  EitherKindHelper ..> "Either<L, R>" : "widens / narrows"

EitherKind --|> Kind


@enduml
