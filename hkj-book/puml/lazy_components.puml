@startuml lazy_components

!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml
hide empty members
interface ThrowableSupplier<T> {
  + {abstract} T get() throws Throwable
}

class Lazy<A> {
  - volatile boolean evaluated
  - {field} A value
  - {field} Throwable exception
  - {field} ThrowableSupplier<? extends A> computation
  -- Factories --
  + {static} Lazy<A> defer(ThrowableSupplier<? extends A>)
  + {static} Lazy<A> now(A)
  -- Methods --
  + A force() throws Throwable
  + Lazy<B> map(Function<? super A, ? extends B>)
  + Lazy<B> flatMap(Function<? super A, ? extends Lazy<? extends B>>)
}
Lazy --> ThrowableSupplier : uses >

interface Kind<F, A> <<HKT Bridge>> {
  ' Intentionally Empty - Marker Interface
}

interface LazyKind<A> extends Kind<LazyKind<?>, A> {
  ' HKT Marker for Lazy
  ' Witness F = LazyKind<?>
  ' Value Type A = A
}


  class LazyKindHelper {
    .. Static Helper Methods ..
    + {static} Kind<LazyKind.Witness, A> widen(Lazy<A>)
    + {static} Lazy<A> narrow(Kind<LazyKind<?>, A>)
    + {static} Kind<LazyKind<?>, A> defer(ThrowableSupplier<A>)
    + {static} Kind<LazyKind<?>, A> now(A)
    + {static} A force(Kind<LazyKind<?>, A>) throws Throwable
  }

  ' Internal Holder Record
  class LazyHolder<A> implements LazyKind<A> {
    - Lazy<A> lazyInstance
  }
  LazyKindHelper ..> LazyHolder : creates >
  LazyKindHelper --> Lazy : uses >
  LazyHolder o--> Lazy : holds




class LazyMonad implements Monad<LazyKind.Witness> {
 + <A, B> @NonNull Kind<LazyKind.Witness, B> map(@NonNull Function<A, B>, @NonNull Kind<LazyKind.Witness, A>)
 + <A> @NonNull Kind<LazyKind.Witness, A> of(@Nullable A)
 + <A, B> @NonNull Kind<LazyKind.Witness, B> ap(@NonNull Kind<LazyKind.Witness, Function<A, B>>, @NonNull Kind<LazyKind.Witness, A>)
 + <A, B> @NonNull Kind<LazyKind.Witness, B> flatMap(@NonNull Function<A, Kind<LazyKind.Witness, B>>, @NonNull Kind<LazyKind.Witness, A>)
}
LazyMonad ..> LazyKindHelper : uses >
LazyMonad ..> LazyKind : operates on >
LazyMonad ..> Lazy : operates on underlying >

note right of LazyMonad
  Implements Functor, Applicative, Monad
  for the LazyKind<?> witness type.
end note

@enduml