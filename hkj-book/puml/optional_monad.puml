@startuml optional_monad
!include https://raw.githubusercontent.com/ncosta-ic/catppuccin-macchiato-plantuml-theme/main/theme.puml
hide empty members
interface "Kind<F, A>" as Kind
interface "Functor<F>" as Functor
interface "Applicative<F>" as Applicative
interface "Monad<M>" as MonadBase
interface "MonadError<M, E>" as MonadErrorBase

interface "OptionalKind<A>" as OptionalKindBase << (O,lightblue) >> {
}

class "OptionalKindHelper" as OptionalKindHelper << (H,grey) >> {
}
note right of OptionalKindHelper
Contains internal 'OptionalHolder<A> record'
which implements OptionalKind<A>.
`record OptionalHolder<A>(Optional<A> optional) implements OptionalKind<A> {}`
end note

class "OptionalFunctor" as OptionalFunctorImpl {
}
class "OptionalMonad" as OptionalMonadImpl {

}

MonadErrorBase --|> MonadBase
MonadBase --|> Applicative
Applicative --|> Functor
Functor --|> Kind : (logically, Kind is the base for HKTs)

OptionalKindBase --|> Kind : <OptionalKind.Witness, A>

OptionalFunctorImpl ..|> Functor : <OptionalKind.Witness>
OptionalMonadImpl --|> OptionalFunctorImpl
OptionalMonadImpl ..|> MonadErrorBase : <OptionalKind.Witness, Unit>

OptionalMonadImpl ..> OptionalKindHelper : uses for widen / narrow
OptionalFunctorImpl ..> OptionalKindHelper : uses for widen / narrow

@enduml
