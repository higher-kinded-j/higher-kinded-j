plugins {
  id("java-library")
  id("maven-publish")
  id("jacoco")
  id("com.diffplug.spotless") version "7.0.3"
  id("signing")
}

group = "io.github.higher-kinded-j"

version = project.findProperty("projectVersion")?.toString() ?: "v0.1.3-SNAPSHOT"

repositories { mavenCentral() }

dependencies {
  implementation("org.jspecify:jspecify:1.0.0")
  testImplementation(platform("org.junit:junit-bom:5.10.2"))
  testImplementation("org.junit.jupiter:junit-jupiter")
  testImplementation("org.assertj:assertj-core:3.25.3")
}

java {
  sourceCompatibility = JavaVersion.VERSION_24
  targetCompatibility = JavaVersion.VERSION_24
  withSourcesJar()
  withJavadocJar()
}

spotless {
  lineEndings = com.diffplug.spotless.LineEnding.UNIX

  java {
    // Apply to all Java files in src/main and src/test
    target("src/**/*.java")

    // Use Google Java Format
    googleJavaFormat("1.27.0").reflowLongStrings().formatJavadoc(true)

    removeUnusedImports()
    trimTrailingWhitespace()
    // endWithNewline() // Usually handled by googleJavaFormat

    // Optional: Add license header
    licenseHeaderFile(
        rootProject.file("config/spotless/copyright.txt"), "(package|import|public|@)")
  }

  kotlinGradle {
    target("*.gradle.kts", "settings.gradle.kts")
    ktfmt("0.47")
  }
}

tasks.test {
  useJUnitPlatform()
  finalizedBy(tasks.jacocoTestReport)
  jvmArgs = listOf("--add-opens", "org.higherkindedj.core/org.higherkindedj.internal=ALL-UNNAMED")
}

tasks.jacocoTestReport {
  dependsOn(tasks.test)

  reports {
    xml.required.set(true)
    html.required.set(true)
    csv.required.set(false)
  }

  val mainSourceSet = sourceSets.main.get()
  val compiledClasses = mainSourceSet.output.classesDirs
  classDirectories.setFrom(
      files(
          compiledClasses.map { dir ->
            fileTree(dir).apply {
              exclude(
                  "**/example/**", // Exclude the example package
                  "**/*Kind.class", // Exclude Kind interfaces
                  "**/*Holder*.class" // Exclude internal holders
                  )
            }
          }))
  sourceDirectories.setFrom(files(mainSourceSet.allSource.srcDirs))
}

publishing {
  publications {
    create<MavenPublication>("mavenJava") {
      // Publish the components generated by the 'java' plugin (JAR, POM)
      from(components["java"])

      pom {
        name.set("Higher-Kinded-J")
        description.set("Bringing Higher-Kinded Types to Java Functional Patterns")
        url.set("https://github.com/higher-kinded-j/higher-kinded-j")

        licenses {
          license {
            name.set("The MIT License")
            url.set("https://opensource.org/licenses/MIT")
          }
        }
        developers {
          developer {
            id.set("higher-kinded-j")
            name.set("Magnus Smith")
            email.set("simulation-hkt@gmail.com")
          }
        }
        scm {
          connection.set("scm:git:git://github.com/higher-kinded-j/higher-kinded-j.git")
          developerConnection.set("scm:git:ssh://github.com/higher-kinded-j/higher-kinded-j.git")
          url.set("https://github.com/higher-kinded-j/higher-kinded-j")
        }
      }
    }
  }
  repositories {
    maven {
      name = "OSSRHSnapshots"
      url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
      credentials {
        username = System.getenv("OSSRH_USERNAME")
        password = System.getenv("OSSRH_TOKEN")
      }
    }
    maven {
      name = "OSSRHReleases"
      url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
      credentials {
        username = System.getenv("OSSRH_USERNAME")
        password = System.getenv("OSSRH_TOKEN")
      }
    }
    maven {
      name = "GitHubPackages"
      url = uri("https://maven.pkg.github.com/higher-kinded-j/higher-kinded-j")

      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
  signing {
    val signingKeyId = System.getenv("SIGNING_KEY_ID")
    val signingKey = System.getenv("SIGNING_KEY")
    val signingPassword = System.getenv("SIGNING_PASSWORD")

    val shouldSign =
        version.toString().endsWith("-SNAPSHOT").not() &&
            project.hasProperty("release") // Only sign if it's a release build

    if (shouldSign && signingKeyId != null && signingKey != null && signingPassword != null) {
      useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
      sign(publishing.publications["mavenJava"])
    } else if (shouldSign) {
      project.logger.warn(
          "Release build detected, but GPG signing key details (SIGNING_KEY_ID, SIGNING_KEY, SIGNING_PASSWORD) are not fully provided. Publication will not be signed.")
    }
  }
}
