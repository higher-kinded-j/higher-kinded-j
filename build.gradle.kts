plugins {
  id("java-library")
  id("maven-publish")
  id("jacoco")
  id("com.diffplug.spotless") version "7.0.3"
  id("signing")
  id("net.thebugmc.gradle.sonatype-central-portal-publisher") version "1.2.4"
}

group = "io.github.higher-kinded-j"

version = project.findProperty("projectVersion")?.toString() ?: "v0.1.4-SNAPSHOT"

repositories {
  gradlePluginPortal()
  mavenCentral()
}

dependencies {
  implementation("org.jspecify:jspecify:1.0.0")
  testImplementation(platform("org.junit:junit-bom:5.10.2"))
  testImplementation("org.junit.jupiter:junit-jupiter")
  testImplementation("org.assertj:assertj-core:3.25.3")
}

java {
  sourceCompatibility = JavaVersion.VERSION_24
  targetCompatibility = JavaVersion.VERSION_24
  withSourcesJar()
  withJavadocJar()
}

tasks.javadoc {
  source = sourceSets.main.get().allJava
  exclude("org/higherkindedj/example/**")
  (options as? CoreJavadocOptions)?.addStringOption("Xdoclint:none", "-quiet")
}

spotless {
  lineEndings = com.diffplug.spotless.LineEnding.UNIX

  java {
    // Apply to all Java files in src/main and src/test
    target("src/**/*.java")

    // Use Google Java Format
    googleJavaFormat("1.27.0").reflowLongStrings().formatJavadoc(true)

    removeUnusedImports()
    trimTrailingWhitespace()
    // endWithNewline() // Usually handled by googleJavaFormat

    // Optional: Add license header
    licenseHeaderFile(
        rootProject.file("config/spotless/copyright.txt"), "(package|import|public|@)")
  }

  kotlinGradle {
    target("*.gradle.kts", "settings.gradle.kts")
    ktfmt("0.47")
  }
}

tasks.test {
  useJUnitPlatform()
  finalizedBy(tasks.jacocoTestReport)
  jvmArgs = listOf("--add-opens", "org.higherkindedj.core/org.higherkindedj.internal=ALL-UNNAMED")
}

tasks.jacocoTestReport {
  dependsOn(tasks.test)

  reports {
    xml.required.set(true)
    html.required.set(true)
    csv.required.set(false)
  }

  val mainSourceSet = sourceSets.main.get()
  val compiledClasses = mainSourceSet.output.classesDirs
  classDirectories.setFrom(
      files(
          compiledClasses.map { dir ->
            fileTree(dir).apply {
              exclude(
                  "**/example/**", // Exclude the example package
                  "**/*Kind.class", // Exclude Kind interfaces
                  "**/*Holder*.class" // Exclude internal holders
                  )
            }
          }))
  sourceDirectories.setFrom(files(mainSourceSet.allSource.srcDirs))
}

val isSnapshotVersion = project.version.toString().endsWith("-SNAPSHOT")
val isReleaseBuild = project.hasProperty("release") || !isSnapshotVersion




publishing {
  publications {
    create<MavenPublication>("mavenJava") {
      // Publish the components generated by the 'java' plugin (JAR, POM)
      from(components["java"])

      pom {
        name.set("Higher-Kinded-J")
        description.set("Bringing Higher-Kinded Types to Java Functional Patterns")
        url.set("https://github.com/higher-kinded-j/higher-kinded-j")

        licenses {
          license {
            name.set("The MIT License")
            url.set("https://opensource.org/licenses/MIT")
          }
        }
        developers {
          developer {
            id.set("higher-kinded-j")
            name.set("Magnus Smith")
            email.set("simulation-hkt@gmail.com")
          }
        }
        scm {
          connection.set("scm:git:git://github.com/higher-kinded-j/higher-kinded-j.git")
          developerConnection.set("scm:git:ssh://github.com/higher-kinded-j/higher-kinded-j.git")
          url.set("https://github.com/higher-kinded-j/higher-kinded-j")
        }
      }
    }
  }
  repositories {
    if (isSnapshotVersion) {
      maven {
        name = "CentralPortalSnapshots"
        url = uri("https://central.sonatype.com/repository/maven-snapshots/")
        credentials {
          // These would be your Central Portal User Code and Passcode
          username = System.getenv("CENTRAL_PORTAL_USERNAME")
          password = System.getenv("CENTRAL_PORTAL_PASSWORD")
        }
      }
    }
  }
}


signing {
  val signingKey = System.getenv("SIGNING_KEY")
  val signingPassword = System.getenv("SIGNING_PASSWORD")
  val hasSigningKey = signingKey != null && signingKey.isNotEmpty()
  val hasSigningPassword = signingPassword != null && signingPassword.isNotEmpty()

  val isReleaseBuildRequiringSigning = project.hasProperty("release") || !project.version.toString().endsWith("-SNAPSHOT")

  if (isReleaseBuildRequiringSigning) {
    project.logger.lifecycle("[SIGNING_CONFIG] Release build detected (version: ${project.version}). Signing will be configured and required.")
    if (hasSigningKey && hasSigningPassword) {
      useInMemoryPgpKeys(signingKey, signingPassword)
      // IMPORTANT: Only configure the 'mavenJava' publication for signing if it's a release build.
      sign(publishing.publications["mavenJava"])
      project.logger.lifecycle("[SIGNING_CONFIG] 'mavenJava' publication has been configured for signing.")
    } else {
      // If it's a release build but keys are missing, log an error.
      // The build might still fail later if signing is truly required by the publish process.
      project.logger.error(
        "RELEASE BUILD SIGNING ERROR: Signing keys (SIGNING_KEY, SIGNING_PASSWORD) are not set or are empty in the environment. Publication cannot be signed for this release build.")
    }
    // For release builds, signing tasks should be considered required.
    isRequired = true
  } else {
    // For snapshot builds (or any non-release build)
    project.logger.lifecycle("[SIGNING_CONFIG] Snapshot build detected (version: ${project.version}). Signing will NOT be configured for 'mavenJava' publication and is NOT required.")
    isRequired = false
  }
}


if (!isSnapshotVersion) {
  centralPortal {
    username.set(System.getenv("CENTRAL_PORTAL_USERNAME"))
    password.set(System.getenv("CENTRAL_PORTAL_PASSWORD"))

    publishingType = net.thebugmc.gradle.sonatypepublisher.PublishingType.AUTOMATIC

    pom {
      name.set("Higher-Kinded-J")
      description.set("Bringing Higher-Kinded Types to Java Functional Patterns")
      url.set("https://github.com/higher-kinded-j/higher-kinded-j")

      licenses {
        license {
          name.set("The MIT License")
          url.set("https://opensource.org/licenses/MIT")
          distribution.set("repo")
        }
      }
      developers {
        developer {
          id.set("higher-kinded-j")
          name.set("Magnus Smith")
          email.set("simulation-hkt@gmail.com")
        }
      }
      scm {
        connection.set("scm:git:git://github.com/higher-kinded-j/higher-kinded-j.git")
        developerConnection.set("scm:git:ssh://github.com/higher-kinded-j/higher-kinded-j.git")
        url.set("https://github.com/higher-kinded-j/higher-kinded-j")
      }
    }
  }

}
